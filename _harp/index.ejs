<div class="home-container">
  <% var n = 0;
        for(var key in public._data){
        n++ %>
        <svg viewBox="0 0 300 300">
            <defs>

                <filter id=<%= "duotone-filter-" +public._data[key].title %> color-interpolation-filters="sRGB"
                      x="0" y="0" height="100%" width="100%">
                  <feColorMatrix type="matrix" values=<%= getColorMatrix(public._data[key].colors) %> />
              </filter>
            </defs>
        </svg>

        <div class="snippet">
          <figure>
            <img src=<%= public._data[key].image %> filter=url(<%= "#duotone-filter-" +public._data[key].title %>) />
          </figure>
        </div>

  <% } %>
  <div class="snippet">
    <figure>
      <img src="/img/may8.jpg" alt="Photo of the printed magazine layout for May 8th" />
    </figure>
    <a href="/magazine" class="title">Magazine layouts on the web</a>
    <p>I collect several magazine layouts and recreate them with css.</p>
  </div>

  <div class="snippet">
    <figure>
      <img src="/img/lemonade.png" alt="iTunes screenshot of the album Lemonade with the dominant colours behaviour" />
    </figure>
    <a href="/palette" class="title">Color palette from image</a>
    <p>Recreating the iTunes library behaviour where  the track list takes a gradient of the album cover as a background.</p>
  </div>
</div>

<!-- - Generate color matrix
- inspired by https://codepen.io/jmperez/pen/LGqaxQ -->

<%
  function getColorMatrix(colors) {
         var value = [];
         var color1 = colors[0] || [255, 255, 255];
         var color2 = colors[1] || [0, 0, 0];
         value = value.concat([color1[0]/256 - color2[0]/256, 0, 0, 0, color2[0]/256]);
         value = value.concat([color1[1]/256 - color2[1]/256, 0, 0, 0, color2[1]/256]);
         value = value.concat([color1[2]/256 - color2[2]/256, 0, 0, 0, color2[2]/256]);
         value = value.concat([0, 0, 0, 1, 0]);
         return value.join(' ');
     }
%>
